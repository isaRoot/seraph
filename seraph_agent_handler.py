import logging
import random
from logging.config import fileConfig

from aiogram import Router, types, F
from aiogram.dispatcher.filters import Command

import file_db
from config import ChatWarsAgentBot_id

fileConfig('logging.ini', disable_existing_loggers=False)
log = logging.getLogger(__name__)
router = Router()
db = file_db.Singleton()


@router.message(
    # F.chat.type == 'private',
    F.forward_from.id == ChatWarsAgentBot_id,
    F.text.startswith('–ü–æ—á—Ç–∏')
)
async def words_game(message: types.Message):
    lines = get_word_strings(message.text)
    pairs = get_word_pairs(lines)
    word = word_processing(pairs)
    text = color_processing(word)
    if message.chat.type == 'private':
        await message.answer(text)
    else:
        await message.reply(text)


@router.message(
    # F.chat.type == 'private',
    F.forward_from.id == ChatWarsAgentBot_id,
    F.text.startswith('üéâ –®–∏–∫–∞—Ä–Ω–æ')
)
async def words_game_win(message: types.Message):
    lines = get_word_strings(message.text)
    pairs = get_word_pairs(lines)
    word = word_processing(pairs)
    text = '–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤.\n–û–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É, –µ—Å–ª–∏ –∏—Ö –Ω–µ –±—ã–ª–æ.\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–±–µ–¥–æ–π'

    if message.chat.type == 'private':
        await message.answer(text)
    else:
        await message.reply(text)


@router.message(
    # F.chat.type == 'private',
    F.forward_from.id == ChatWarsAgentBot_id,
    F.text.startswith('Close one')
)
async def words_game_en(message: types.Message):
    lines = get_word_strings(message.text)
    pairs = get_word_pairs(lines)
    word = word_processing(pairs, language='en')
    text = color_processing(word)
    if message.chat.type == 'private':
        await message.answer(text)
    else:
        await message.reply(text)


@router.message(
    # F.chat.type == 'private',
    F.forward_from.id == ChatWarsAgentBot_id,
    F.text.startswith('üéâ Sweet')
)
async def words_game_en_win(message: types.Message):
    lines = get_word_strings(message.text)
    pairs = get_word_pairs(lines)
    word = word_processing(pairs, language='en')
    text = 'Thank You for the word list.\nThem will be added to the database, if not yet.\nCongratulations'
    if message.chat.type == 'private':
        await message.answer(text)
    else:
        await message.reply(text)


def color_processing(word):
    if word.is_loose:
        if word.language == 'ru':
            return '–ñ–∞–ª—å —á—Ç–æ –Ω–µ —É–≥–∞–¥–∞–ª–∏'
        elif word.language == 'en':
            return 'sad that you didn\'t guess'
    green = word.has_green()
    yellow = word.has_yellow()
    words = None
    if green is not None:
        words_fdb = db.words_get_by_exist_symbol(word.language, green)
        words = untuple_list(words_fdb)
    elif yellow is not None:
        words_fdb = db.words_get_by_exist_symbol(word.language, yellow)
        words = untuple_list(words_fdb)
    else:
        words_fdb = db.words_get_by_not_exist_symbol(word.language, word.black[0])
        words = untuple_list(words_fdb)
    words_len = len(words)
    words = search_green_variants(word, words)
    words_len = len(words)
    words = search_black_variants(word, words)
    words_len = len(words)
    words = search_yellow_variants(word, words)
    words_len = len(words)
    text = ''
    if word.language == 'ru':
        text = get_result_ready_for_ru_user(words)
    elif word.language == 'en':
        text = get_result_ready_for_en_user(words)
    return text


def get_word_strings(text):
    """
        '–ü–æ—á—Ç–∏!
    –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!

     –¶ –ï –ó –ê –† –¨
    ‚¨õÔ∏èüü©‚¨õÔ∏èüü®‚¨õÔ∏è‚¨õÔ∏è
     –ë –ï –î –õ –ê –ú
    ‚¨õÔ∏èüü©‚¨õÔ∏èüü®üü®‚¨õÔ∏è
     –ì –ï –ï –ù –ù –ê
    üü®üü©üü®‚¨õÔ∏è‚¨õÔ∏èüü©

    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: 3. 3 –±–∞–ª–ª–æ–≤ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å. –û—Ç–≤–µ—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º.'
        """
    lines = text.splitlines()
    res = []
    for line in lines:
        if line.casefold().startswith('–ø–æ—á—Ç–∏'):
            continue
        elif line.casefold().startswith('–ø–æ–ø—Ä–æ–±—É–π'):
            continue
        elif line.casefold().startswith('üéâ –®–∏–∫–∞—Ä–Ω–æ'.casefold()):
            continue
        elif line.casefold().startswith('üéâ Sweet'.casefold()):
            continue
        elif line.casefold().startswith('Close one'.casefold()):
            continue
        elif line.casefold().startswith('Try to guess'.casefold()):
            continue
        elif line.casefold().startswith('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'.casefold()):
            break
        elif line.casefold().endswith('Reply to me with answer.'.casefold()):
            break
        elif line.casefold().startswith('–ü–æ–ª—É—á–Ω–æ'.casefold()):
            break
        elif line.casefold().startswith('You earned'.casefold()):
            break
        elif line.casefold().startswith('–û—á–µ–Ω—å –∂–∞–ª—å, –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å'.casefold()):
            li = line.split()
            line = li[-1].replace('.', '').casefold()
            db.words_add_word_if_new('ru', line)
            break
        elif line == '':
            continue
        else:
            res.append(line.replace(' ', '').replace('Ô∏è', '').casefold())  # –í—Ç–æ—Ä–æ–π —Ä–µ–ø–ª–µ–π—Å –¥–ª—è —Å–º–∞–π–ª–∞ –¥–≤–æ–π–Ω–æ–≥–æ
    return res


def get_word_pairs(lines: list):
    pairs = {}
    while len(lines) > 0:
        key = lines.pop(0)
        value = lines.pop(0)
        pairs.update({key: value})
    return pairs


def word_processing(pairs: dict, language='ru'):
    keys = pairs.keys()
    word = Word(language=language)
    for key in keys:
        value = pairs.get(key)
        get_colored_word(key, value, word)
        db.words_add_word_if_new(language, key)
    if len(keys) == 6:
        word.is_loose = True
    return word


def get_colored_word(text, check, word):
    log.info(f'{text}: {check}')
    text_list = list(text)
    check_list = list(check)
    for i in range(0, 6):
        if check_list[i] == 'üü©':
            word.green[i] = text_list[i]
            if text_list[i] in word.black:
                word.black.remove(text_list[i])
        elif check_list[i] == 'üü®':
            if text_list[i] in word.black:
                word.black.remove(text_list[i])
            word.add_yellow(i, text_list[i])
        else:
            if text_list[i] not in word.green:
                if text_list[i] not in word.yellow:
                    word.add_black(text_list[i])
    return word


def untuple_list(words_fdb):
    words = []
    for word_fdb in words_fdb:
        words.append(word_fdb[0])
    return words


def search_green_variants(word, word_list: list):
    green = word.green
    for i in range(0, 6):
        bad_words = []
        if green[i] is None:
            continue
        for w in word_list:
            w_list = list(w)
            if w_list[i] != green[i]:
                bad_words.append(w)
        for bad in bad_words:
            word_list.remove(bad)
    return word_list


def search_black_variants(word, word_list: list):
    for black in word.black:
        bad_words = []
        for w in word_list:
            w_list = list(w)
            if black in w_list:
                bad_words.append(w)
        for bad in bad_words:
            word_list.remove(bad)
    return word_list


def search_yellow_variants(word, word_list: list):
    yellow = word.yellow
    for i in range(0, 6):
        bad_words = []
        if len(yellow[i]) == 0:
            continue
        for w in word_list:
            w_list = list(w)
            if w_list[i] in yellow[i]:
                bad_words.append(w)
        for bad in bad_words:
            word_list.remove(bad)
    for char in word.chars:
        bad_words = []
        for w in word_list:
            if char not in list(w):
                bad_words.append(w)
        for bad in bad_words:
            word_list.remove(bad)
    return word_list


def get_result_ready_for_ru_user(words: list):
    text = ''
    l = len(words)
    text += f'–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {l}\n'
    if l > 20:
        text += '—Å–ª—É—á–∞–π–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ –∏–∑ 20 –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n'
        r20 = random.choices(words, k=20)
        for i in range(0, 20):
            text += f'{i + 1:02d}. {r20[i].swapcase()}\n'
    elif l <= 0:
        text += '–î–µ—Ä–∂–∏—Ç–µ—Å—å —Ç–∞–º –∫–∞–∫ –Ω–∏–±—É–¥—å'
    else:
        for i in range(0, l):
            text += f'{i + 1:02d}. {words[i].swapcase()}\n'
    return text


def get_result_ready_for_en_user(words: list):
    text = ''
    l = len(words)
    text += f'Suitable guesses found: {l}\n'
    if l > 20:
        text += 'Random 20 possible guesses:\n'
        r20 = random.choices(words, k=20)
        for i in range(0, 20):
            text += f'{i + 1:02d}. {r20[i].swapcase()}\n'
    elif l <= 0:
        text += 'Sorry, I don\t know this word!'
    else:
        for i in range(0, l):
            text += f'{i + 1:02d}. {words[i].swapcase()}\n'
    return text


class Word:
    green = [None, None, None, None, None, None]
    yellow = [[], [], [], [], [], []]
    black = []
    chars = []
    language: str
    is_loose: bool = False

    def __init__(self, language='ru'):
        self.green = [None, None, None, None, None, None]
        self.yellow = [[], [], [], [], [], []]
        self.black = []
        self.chars = []
        self.language = language
        self.is_loose = False

    def add_black(self, s):
        if s not in self.black:
            if s not in self.chars:
                self.black.append(s)

    def add_yellow(self, i, s):
        if s not in self.yellow[i]:
            self.yellow[i].append(s)
        if s not in self.chars:
            self.chars.append(s)
        if s in self.black:
            self.black.remove(s)

    def has_green(self):
        for g in self.green:
            if g is not None:
                return g
        return None

    def has_yellow(self):
        if len(self.chars) > 0:
            return self.chars[0]
        return None
